# =========================================================================
# Stage 1: Builder
#
# Base Image: Ubuntu 20.04
# This stage installs all development dependencies, Python packages,
# the Sophon SDK, and packages the application using PyInstaller.
# =========================================================================
FROM ubuntu:20.04 AS builder

# Set non-interactive frontend and timezone to avoid prompts during build
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# --- 1. Install Base System Dependencies & Python PPA ---
# Combine multiple apt calls to reduce layers and clean up afterward.
RUN ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        tzdata \
        software-properties-common \
        ca-certificates && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# --- 2. Install Python 3.10 and Development Tools ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        python3.10 \
        python3.10-venv \
        python3.10-dev \
        python3.10-distutils \
        python3-pip \
        file \
        locales \
        libncurses5 \
        build-essential \
        gcc \
        g++ \
        unzip \
        cmake \
        libgl1 && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# --- 3. Configure Python & Pip Alternatives ---
# Set python3.10 and its pip as the system default
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --set python3 /usr/bin/python3.10 && \
    update-alternatives --set python /usr/bin/python3.10 && \
    python3.10 -m ensurepip --upgrade && \
    python3.10 -m pip install --upgrade pip && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1

# Set working directory
WORKDIR /workspace/smart-album-tpu

# --- 4. Install Python Dependencies ---
# Copy only requirements.txt first to leverage Docker cache.
COPY requirements.txt .
RUN pip install --no-cache-dir -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

# Install PyInstaller separately
RUN pip install --no-cache-dir pyinstaller -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

# --- 5. Copy Project Source Code and SDK files ---
# IMPORTANT: Assumes Sophon .deb packages are in the project root directory.
COPY . .

# --- 6. Install Sophon SAIL Environment ---
# Set environment variables required for the SDK installation and build
ENV PYTHONPATH "$PYTHONPATH:/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/opencv-python/"
ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/lib:/opt/sophon/sophon-ffmpeg-latest/lib:/opt/sophon/sophon-soc-libisp_1.0.0/lib"

# Run the Sophon SAIL installer
RUN python3 -m dfss --install sail

# --- 7. Package the Application with PyInstaller ---
RUN pyinstaller --onedir \
    --name 'smart_album' \
    --add-data 'models/BM1684X:models/BM1684X' \
    --add-data 'models/shibing624:models/shibing624' \
    --add-data 'static:static' \
    --add-data 'templates:templates' \
    --add-data 'data/app_config.json:data' \
    --add-data 'clip/vocab.txt:clip' \
    --add-data "$(python3 -c 'import numpy; import os; print(os.path.dirname(numpy.__file__))'):numpy" \
    --hidden-import 'sophon.sail' \
    --hidden-import 'cv2' \
    --hidden-import 'distutils' \
    app.py

# =========================================================================
# Stage 2: Final Image
#
# This stage creates the final, minimal runtime image.
# It starts from a fresh Ubuntu base, installs only essential runtime libs,
# and copies the packaged application and Sophon runtime from the builder.
# =========================================================================
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# --- 1. Install Minimal Runtime Dependencies ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends \
        libgl1 \
        tzdata \
        ca-certificates && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata ca-certificates && \
    apt-get clean && \
    rm -rf /var/lib/apt/lists/*

# --- 2. Set Up Application Environment ---
WORKDIR /app

# Copy the packaged application from the builder stage
COPY --from=builder /workspace/smart-album-tpu/dist/smart_album .

# --- 3. Define Container Entrypoint and Default Command ---
# This allows overriding arguments easily when running the container.
ENTRYPOINT ["./smart_album"]
CMD [ \
    "--image_model", "./models/BM1684X/cn_clip_image_vit_h_14_bm1684x_f16_1b.bmodel", \
    "--text_model", "./models/BM1684X/cn_clip_text_vit_h_14_bm1684x_f16_1b.bmodel", \
    "--bce_model", "./models/BM1684X/text2vec_base_chinese_bm1684x_f16_1b.bmodel", \
    "--dev_id", "0" \
]
