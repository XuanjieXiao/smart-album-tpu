# =========================================================================
# 第一阶段：构建器 (Builder)
#
# 基础镜像使用 Ubuntu 22.04。
# 本阶段严格遵循您提供的安装脚本，以确保环境构建的准确性。
# =========================================================================
FROM ubuntu:22.04 AS builder

ARG PLATFORM="BM1688_2CORE"

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# 设置工作目录
WORKDIR /workspace/smart-album-tpu

# --- 1. 环境准备：设置时区和安装 PPA 添加工具 ---
RUN apt-get update && \
    apt-get install -y tzdata libssl3 apt-utils wget && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get install -y software-properties-common

RUN wget http://ports.ubuntu.com/ubuntu-ports/pool/main/o/openssl/libssl1.1_1.1.1f-1ubuntu2.24_arm64.deb && \
    dpkg -i libssl1.1_1.1.1f-1ubuntu2.24_arm64.deb && \
    rm libssl1.1_1.1.1f-1ubuntu2.24_arm64.deb

RUN echo "Using python version: 3.10"; \
    apt-get update && \
    apt-get install -y --no-install-recommends \
        python3 python3-venv python3-dev python3-distutils python3-pip curl

# --- 4. 安装 pip（不要使用 ensurepip，Ubuntu 禁用）---
RUN apt-get update && \
    apt-get install -y python3-pip

# --- 5. 配置 pip 的默认版本 ---
RUN update-alternatives --install /usr/bin/pip pip /usr/bin/pip3 1


RUN python3 --version && pip --version


# --- 6. 安装其他系统依赖 ---
RUN apt-get install -y --no-install-recommends \
        file locales libncurses5 build-essential gcc g++ unzip cmake libgl1 ca-certificates

# Add library path
ENV PYTHONPATH "$PYTHONPATH:/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/opencv-python/"
ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/lib:/opt/sophon/sophon-ffmpeg-latest/lib:/opt/sophon/sophon-soc-libisp_1.0.0/lib"

COPY ./requirements.txt .

# --- 8. 安装 Python 依赖包 ---
RUN pip3 install -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple && \
    pip3 install pyinstaller -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

# --- 10. 编译和安装 Sophon-SAIL ---
RUN if [ "$PLATFORM" = "BM1688_1CORE" ] || [ "$PLATFORM" = "BM1688_2CORE" ]; then \
        python3 -m dfss --url=open@sophgo.com:/dfss_easy_install/sail/master/soc_BM1688/v1.9_libsophon-0.4.10_sophonmedia-1.9.0/py310/sophon_arm-3.9.3-py3-none-any.whl && \
        pip3 install sophon_arm-3.9.3-py3-none-any.whl; \
    else \
        echo "error: get ${PLATFORM}, not support platform!" && exit 1; \
    fi


# --- 7. 拷贝项目文件 ---
COPY . .

RUN if [ "$PLATFORM" = "BM1688_1CORE" ]; then \
        if [ ! -d "models" ]; then \
            mkdir models; \
        fi; \
        if [ ! -d "models/BM1688_1CORE" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/BM1688_1CORE.zip && \
            unzip BM1688_1CORE.zip -d ./models && \
            rm BM1688_1CORE.zip; \
        else \
            echo "models/BM1688_1CORE already exists, skipping download."; \
        fi; \
        if [ ! -d "models/shibing624" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/shibing624.zip && \
            unzip shibing624.zip -d ./models && \
            rm shibing624.zip; \
        else \
            echo "models/shibing624 already exists, skipping download."; \
        fi; \
    elif [ "$PLATFORM" = "BM1688_2CORE" ]; then \
        if [ ! -d "models" ]; then \
            mkdir models; \
        fi; \
        if [ ! -d "models/BM1688_2CORE" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/BM1688_2CORE.zip && \
            unzip BM1688_2CORE.zip -d ./models && \
            rm BM1688_2CORE.zip; \
        else \
            echo "models/BM1688_2CORE already exists, skipping download."; \
        fi; \
        if [ ! -d "models/shibing624" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/shibing624.zip && \
            unzip shibing624.zip -d ./models && \
            rm shibing624.zip; \
        else \
            echo "models/shibing624 already exists, skipping download."; \
        fi; \
    else \
        echo "error: get ${PLATFORM}, not support platform!" && exit 1; \
    fi; 



# --- 11. 使用 PyInstaller 进行打包 ---

RUN if [ "$PLATFORM" = "BM1688_1CORE" ]; then \
        pyinstaller --onedir \
        --name 'smart_album' \
        --add-data 'models/BM1688_1CORE:models/BM1688_1CORE' \
        --add-data 'models/shibing624:models/shibing624' \
        --add-data 'static:static' \
        --add-data 'templates:templates' \
        --add-data 'data/app_config.json:data' \
        --add-data 'clip/vocab.txt:clip' \
        --add-data "$(python3 -c 'import numpy; import os; print(os.path.dirname(numpy.__file__))'):numpy" \
        --hidden-import 'sophon.sail' \
        --hidden-import 'cv2' \
        --hidden-import 'distutils' \
        app.py; \
    elif [ "$PLATFORM" = "BM1688_2CORE" ]; then \
        pyinstaller --onedir \
        --name 'smart_album' \
        --add-data 'models/BM1688_2CORE:models/BM1688_2CORE' \
        --add-data 'models/shibing624:models/shibing624' \
        --add-data 'static:static' \
        --add-data 'templates:templates' \
        --add-data 'data/app_config.json:data' \
        --add-data 'clip/vocab.txt:clip' \
        --add-data "$(python3 -c 'import numpy; import os; print(os.path.dirname(numpy.__file__))'):numpy" \
        --hidden-import 'sophon.sail' \
        --hidden-import 'cv2' \
        --hidden-import 'distutils' \
        app.py; \
    else \
        echo "error: get ${PLATFORM}, not support platform!" && exit 1; \
    fi

# =========================================================================
# 第二阶段：最终镜像 (Final Image)
# =========================================================================
FROM ubuntu:22.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# --- 1. 安装最基本的运行时依赖 ---
ENV LD_LIBRARY_PATH="/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/lib:/opt/sophon/sophon-ffmpeg-latest/lib:/opt/sophon/sophon-soc-libisp_1.0.0/lib:$LD_LIBRARY_PATH"

RUN apt-get update && \
    apt-get install -y --no-install-recommends libgl1 tzdata ca-certificates && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# --- 3. 设置工作目录 ---
WORKDIR /app

# --- 4. 从 builder 阶段拷贝打包好的可执行文件 ---
COPY --from=builder /workspace/smart-album-tpu/dist/smart_album .

# --- 4.1 拷贝 entrypoint 脚本 ---
COPY --from=builder /workspace/smart-album-tpu/packaging_file/entrypoint.sh /app/entrypoint.sh

RUN chmod +x /app/entrypoint.sh

# --- 5. 设置容器启动命令 ---
ENTRYPOINT ["/bin/bash", "/app/entrypoint.sh"]