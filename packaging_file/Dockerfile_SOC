# =========================================================================
# 第一阶段：构建器 (Builder)
#
# 基础镜像使用 Ubuntu 20.04。
# 本阶段严格遵循您提供的安装脚本，以确保环境构建的准确性。
# =========================================================================
FROM ubuntu:20.04 AS builder

ARG PLATFORM="BM1684X"

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# 设置工作目录
WORKDIR /workspace/smart-album-tpu

# --- 1. 环境准备：设置时区和安装 PPA 添加工具 ---
RUN apt-get update && \
    apt-get install -y tzdata && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get install -y software-properties-common

# --- 2. 添加 PPA 并安装 Python 3.10 ---
RUN echo "Using python version: 3.10"; \
    apt-get update && \
    apt-get install -y --no-install-recommends software-properties-common gnupg2 dirmngr&& \
    echo "deb http://launchpad.proxy.ustclug.org/deadsnakes/ppa/ubuntu focal main" > /etc/apt/sources.list.d/deadsnakes-ppa.list && \
    apt-key adv --keyserver keyserver.ubuntu.com --recv-keys BA6932366A755776 && \
    apt-get update && \
    apt-get install -y --no-install-recommends python3.10 python3.10-venv python3.10-dev python3.10-distutils python3-pip libssl-dev curl

# --- 3. 配置 Python 的默认版本 ---
# **(已拆分)** 对应脚本中 `update-alternatives` for python 的命令
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --set python3 /usr/bin/python3.10 && \
    update-alternatives --set python /usr/bin/python3.10

# --- 4. 升级 pip ---
RUN python3.10 -m ensurepip --upgrade && \
    python3.10 -m pip install --upgrade pip

# --- 5. 配置 pip 的默认版本 ---
RUN ln -sf /usr/local/bin/pip3.10 /usr/bin/pip3.10 && \
    ln -sf /usr/bin/pip3.10 /usr/bin/pip && \
    ln -sf /usr/local/bin/pip3.10 /usr/bin/pip3 && \
    update-alternatives --install /usr/bin/pip3 pip3 /usr/bin/pip3.10 1 && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3.10 1 && \
    update-alternatives --set pip /usr/bin/pip3.10

# --- 6. 安装其他系统依赖 ---
RUN apt-get install -y --no-install-recommends \
        file locales libncurses5 build-essential gcc g++ unzip cmake libgl1 ca-certificates

# Add library path
ENV PYTHONPATH "$PYTHONPATH:/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/opencv-python/"
ENV LD_LIBRARY_PATH "$LD_LIBRARY_PATH:/opt/sophon/libsophon-current/lib:/opt/sophon/sophon-opencv-latest/lib:/opt/sophon/sophon-ffmpeg-latest/lib:/opt/sophon/sophon-soc-libisp_1.0.0/lib"

COPY ./requirements.txt .

# --- 8. 安装 Python 依赖包 ---
RUN pip3 install -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple && \
    pip3 install pyinstaller -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

# --- 10. 编译和安装 Sophon-SAIL ---
RUN if [ "$PLATFORM" = "BM1684X" ]; then \
        python3 -m dfss --url=open@sophgo.com:/dfss_easy_install/sail/SAIL_8X/release/release_3.10.3/soc_BM1684_BM1684X/libsophon-0.5.2_sophonmw-0.13.0/py310/sophon_arm-3.10.3-py3-none-any.whl && \
        pip3 install sophon_arm-3.10.3-py3-none-any.whl; \
    elif [ "$PLATFORM" = "BM1688" ]; then \
        python3 -m dfss --url=open@sophgo.com:/dfss_easy_install/sail/SAIL_8X/release/release_3.10.3/soc_BM1684_BM1684X/libsophon-0.5.2_sophonmw-0.13.0/py310/sophon_arm-3.10.3-py3-none-any.whl && \
        pip3 install sophon_arm-3.10.3-py3-none-any.whl; \
    else \
        echo "error: get ${PLATFORM}, not support platform!" && exit 1; \
    fi

RUN if [ "$PLATFORM" = "BM1684X" ]; then \
        if [ ! -d "models" ]; then \
            mkdir models; \
        fi; \
        if [ ! -d "models/BM1684X" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/BM1684X.zip && \
            unzip BM1684X.zip -d ./models && \
            rm BM1684X.zip; \
        else \
            echo "models/BM1684X already exists, skipping download."; \
        fi; \
        if [ ! -d "models/shibing624" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/shibing624.zip && \
            unzip shibing624.zip -d ./models && \
            rm shibing624.zip; \
        else \
            echo "models/shibing624 already exists, skipping download."; \
        fi; \
    elif [ "$PLATFORM" = "BM1688" ]; then \
        if [ ! -d "models" ]; then \
            mkdir models; \
        fi; \
        if [ ! -d "models/BM1688" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/BM1688.zip && \
            unzip BM1688.zip -d ./models && \
            rm BM1688.zip; \
        else \
            echo "models/BM1688 already exists, skipping download."; \
        fi; \
        if [ ! -d "models/shibing624" ]; then \
            python3 -m dfss --url=open@sophgo.com:SILK/level-4/smart-album/shibing624.zip && \
            unzip shibing624.zip -d ./models && \
            rm shibing624.zip; \
        else \
            echo "models/shibing624 already exists, skipping download."; \
        fi; \
    else \
        echo "error: get ${PLATFORM}, not support platform!" && exit 1; \
    fi; 

# --- 7. 拷贝项目文件 ---
COPY . .

# --- 11. 使用 PyInstaller 进行打包 ---
RUN pyinstaller --onedir \
    --name 'smart_album' \
    --add-data 'models/BM1684X:models/BM1684X' \
    --add-data 'models/shibing624:models/shibing624' \
    --add-data 'static:static' \
    --add-data 'templates:templates' \
    --add-data 'data/app_config.json:data' \
    --add-data 'clip/vocab.txt:clip' \
    --add-data "$(python3 -c 'import numpy; import os; print(os.path.dirname(numpy.__file__))'):numpy" \
    --hidden-import 'sophon.sail' \
    --hidden-import 'cv2' \
    --hidden-import 'distutils' \
    app.py

# =========================================================================
# 第二阶段：最终镜像 (Final Image)
# =========================================================================
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# --- 1. 安装最基本的运行时依赖 ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends libgl1 tzdata ca-certificates && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# --- 3. 设置工作目录 ---
WORKDIR /app

# --- 4. 从 builder 阶段拷贝打包好的可执行文件 ---
COPY --from=builder /workspace/smart-album-tpu/dist/smart_album .

# --- 5. 设置容器启动命令 ---
ENTRYPOINT ["./smart_album"]
CMD [ \
    "--image_model", "./models/BM1684X/cn_clip_image_vit_h_14_bm1684x_f16_1b.bmodel", \
    "--text_model", "./models/BM1684X/cn_clip_text_vit_h_14_bm1684x_f16_1b.bmodel", \
    "--bce_model", "./models/BM1684X/text2vec_base_chinese_bm1684x_f16_1b.bmodel", \
    "--dev_id", "0" \
]