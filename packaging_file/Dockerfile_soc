# =========================================================================
# 第一阶段：构建器 (Builder)
#
# 基础镜像使用 Ubuntu 20.04。
# 本阶段严格遵循您提供的安装脚本，以确保环境构建的准确性。
# =========================================================================
FROM ubuntu:20.04 AS builder

# 设置环境变量
ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# 设置工作目录
WORKDIR /workspace/smart-album-tpu

# --- 1. 环境准备：设置时区和安装 PPA 添加工具 ---
RUN apt-get update && \
    apt-get install -y tzdata && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get install -y software-properties-common

# --- 2. 添加 PPA 并安装 Python 3.10 ---
RUN add-apt-repository -y ppa:deadsnakes/ppa && \
    apt-get update && \
    apt-get install -y python3.10 python3.10-venv python3.10-dev python3.10-distutils python3-pip

# --- 3. 配置 Python 的默认版本 ---
# **(已拆分)** 对应脚本中 `update-alternatives` for python 的命令
RUN update-alternatives --install /usr/bin/python3 python3 /usr/bin/python3.10 1 && \
    update-alternatives --install /usr/bin/python python /usr/bin/python3.10 1 && \
    update-alternatives --set python3 /usr/bin/python3.10 && \
    update-alternatives --set python /usr/bin/python3.10

# --- 4. 升级 pip ---
# **(已拆分)** 对应脚本中 `ensurepip` 和 `pip install --upgrade pip`
RUN python3.10 -m ensurepip --upgrade && \
    python3.10 -m pip install --upgrade pip

# --- 5. 配置 pip 的默认版本 ---
# **(已拆分和修正)** 对应脚本中 `ln -sf` 和 `update-alternatives` for pip 的命令
# 补上了遗漏的 `ln` 命令，并修正了错误的 `update-alternatives` 命令
RUN ln -sf /usr/local/bin/pip3.10 /usr/bin/pip3.10 && \
    ln -sf /usr/bin/pip3.10 /usr/bin/pip && \
    update-alternatives --install /usr/bin/pip pip /usr/bin/pip3.10 1 && \
    update-alternatives --set pip /usr/bin/pip3.10

# --- 6. 安装其他系统依赖 ---
RUN apt-get install -y --no-install-recommends \
        file locales dkms libncurses5 build-essential gcc g++ unzip cmake libgl1 ca-certificates

# --- 7. 拷贝项目文件 ---
COPY . .

# --- 8. 安装 Python 依赖包 ---
RUN pip install torch==2.6.0 torchvision==0.21.0 torchaudio==2.6.0 --index-url https://download.pytorch.org/whl/cpu && \
    pip install -r requirements.txt -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple && \
    pip install pyinstaller -i https://mirrors.tuna.tsinghua.edu.cn/pypi/web/simple

# --- 10. 编译和安装 Sophon-SAIL ---
RUN python3 -m dfss --install sail

# --- 11. 使用 PyInstaller 进行打包 ---
RUN pyinstaller smart_album.spec

# =========================================================================
# 第二阶段：最终镜像 (Final Image)
# =========================================================================
FROM ubuntu:20.04

ENV DEBIAN_FRONTEND=noninteractive
ENV TZ=Asia/Shanghai

# --- 1. 安装最基本的运行时依赖 ---
RUN apt-get update && \
    apt-get install -y --no-install-recommends libgl1 tzdata ca-certificates && \
    ln -fs /usr/share/zoneinfo/Asia/Shanghai /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# --- 2. 从 builder 阶段拷贝并安装 Sophon 运行时库 ---
COPY --from=builder /workspace/smart-album-tpu/sophon-libsophon_0.5.2_amd64.deb .


# --- 3. 设置工作目录 ---
WORKDIR /app

# --- 4. 从 builder 阶段拷贝打包好的可执行文件 ---
COPY --from=builder /workspace/smart-album-tpu/dist/smart_album .

# --- 5. 设置容器启动命令 ---
ENTRYPOINT ["./smart_album"]
CMD [ \
    "--image_model", "./models/BM1684X/cn_clip_image_vit_h_14_bm1684x_f16_1b.bmodel", \
    "--text_model", "./models/BM1684X/cn_clip_text_vit_h_14_bm1684x_f16_1b.bmodel", \
    "--bce_model", "./models/BM1684X/text2vec_base_chinese_bm1684x_f16_1b.bmodel", \
    "--dev_id", "0" \
]